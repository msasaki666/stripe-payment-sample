// Code generated by SQLBoiler boilingseed-0.1.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package seeds

import (
	"context"
	"fmt"
	"math"
	"strconv"
	"time"

	models "github.com/msasaki666/backend/models"
	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
)

var (
	customerColumnsWithDefault = []string{"id"}
	customerDBTypes            = map[string]string{`ID`: `bigint`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `IPUID`: `text`, `StripeCustomerID`: `text`}
)

// defaultRandomCustomer creates a random model.Customer
// Used when RandomCustomer is not set in the Seeder
func defaultRandomCustomer() (*models.Customer, error) {
	o := &models.Customer{}
	seed := randomize.NewSeed()
	err := randomize.Struct(seed, o, customerDBTypes, true, customerColumnsWithDefault...)

	return o, err
}

func (s Seeder) seedCustomers(ctx context.Context, exec boil.ContextExecutor) error {
	fmt.Println("Adding Customers")
	CustomersToAdd := s.MinCustomersToSeed

	randomFunc := s.RandomCustomer
	if randomFunc == nil {
		randomFunc = defaultRandomCustomer
	}

	for i := 0; i < CustomersToAdd; i++ {
		// create model
		o, err := randomFunc()
		if err != nil {
			return fmt.Errorf("unable to get Random Customer: %w", err)
		}

		// insert model
		if err := o.Insert(ctx, exec, boil.Infer()); err != nil {
			return fmt.Errorf("unable to insert Customer: %w", err)
		}
	}

	// run afterAdd
	if s.AfterCustomersAdded != nil {
		if err := s.AfterCustomersAdded(ctx); err != nil {
			return fmt.Errorf("error running AfterCustomersAdded: %w", err)
		}
	}

	fmt.Println("Finished adding Customers")
	return nil
}

// These packages are needed in SOME models
// This is to prevent errors in those that do not need it
var _ = math.E
var _ = queries.Query{}

// This is to force strconv to be used. Without it, it causes an error because strconv is imported by ALL the drivers
var _ = strconv.IntSize

// customer is here to prevent erros due to driver "BasedOnType" imports.
type customer struct {
	ID               int64
	CreatedAt        time.Time
	UpdatedAt        time.Time
	IPUID            string
	StripeCustomerID string
}
