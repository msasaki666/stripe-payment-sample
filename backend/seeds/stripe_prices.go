// Code generated by SQLBoiler boilingseed-0.1.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package seeds

import (
	"context"
	"fmt"
	"math"
	"strconv"
	"time"

	models "github.com/msasaki666/backend/models"
	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
)

var (
	stripePriceColumnsWithDefault = []string{"id"}
	stripePriceDBTypes            = map[string]string{`ID`: `bigint`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `IDOnStripe`: `text`, `Type`: `text`, `StripeProductID`: `bigint`}
)

// defaultRandomStripePrice creates a random model.StripePrice
// Used when RandomStripePrice is not set in the Seeder
func defaultRandomStripePrice() (*models.StripePrice, error) {
	o := &models.StripePrice{}
	seed := randomize.NewSeed()
	err := randomize.Struct(seed, o, stripePriceDBTypes, true, stripePriceColumnsWithDefault...)

	return o, err
}

func (s Seeder) seedStripePrices(ctx context.Context, exec boil.ContextExecutor) error {
	fmt.Println("Adding StripePrices")
	StripePricesToAdd := s.MinStripePricesToSeed

	randomFunc := s.RandomStripePrice
	if randomFunc == nil {
		randomFunc = defaultRandomStripePrice
	}

	for i := 0; i < StripePricesToAdd; i++ {
		// create model
		o, err := randomFunc()
		if err != nil {
			return fmt.Errorf("unable to get Random StripePrice: %w", err)
		}

		// insert model
		if err := o.Insert(ctx, exec, boil.Infer()); err != nil {
			return fmt.Errorf("unable to insert StripePrice: %w", err)
		}
	}

	// run afterAdd
	if s.AfterStripePricesAdded != nil {
		if err := s.AfterStripePricesAdded(ctx); err != nil {
			return fmt.Errorf("error running AfterStripePricesAdded: %w", err)
		}
	}

	fmt.Println("Finished adding StripePrices")
	return nil
}

// These packages are needed in SOME models
// This is to prevent errors in those that do not need it
var _ = math.E
var _ = queries.Query{}

// This is to force strconv to be used. Without it, it causes an error because strconv is imported by ALL the drivers
var _ = strconv.IntSize

// stripePrice is here to prevent erros due to driver "BasedOnType" imports.
type stripePrice struct {
	ID              int64
	CreatedAt       time.Time
	UpdatedAt       time.Time
	IDOnStripe      string
	Type            string
	StripeProductID int64
}
