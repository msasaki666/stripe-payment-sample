// Code generated by SQLBoiler boilingseed-0.1.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package seeds

import (
	"context"
	"fmt"
	"math"
	"strconv"

	models "github.com/msasaki666/backend/models"
	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
)

var (
	schemaMigrationColumnsWithDefault = []string{}
	schemaMigrationDBTypes            = map[string]string{`Version`: `bigint`, `Dirty`: `boolean`}
)

// defaultRandomSchemaMigration creates a random model.SchemaMigration
// Used when RandomSchemaMigration is not set in the Seeder
func defaultRandomSchemaMigration() (*models.SchemaMigration, error) {
	o := &models.SchemaMigration{}
	seed := randomize.NewSeed()
	err := randomize.Struct(seed, o, schemaMigrationDBTypes, true, schemaMigrationColumnsWithDefault...)

	return o, err
}

func (s Seeder) seedSchemaMigrations(ctx context.Context, exec boil.ContextExecutor) error {
	fmt.Println("Adding SchemaMigrations")
	SchemaMigrationsToAdd := s.MinSchemaMigrationsToSeed

	randomFunc := s.RandomSchemaMigration
	if randomFunc == nil {
		randomFunc = defaultRandomSchemaMigration
	}

	for i := 0; i < SchemaMigrationsToAdd; i++ {
		// create model
		o, err := randomFunc()
		if err != nil {
			return fmt.Errorf("unable to get Random SchemaMigration: %w", err)
		}

		// insert model
		if err := o.Insert(ctx, exec, boil.Infer()); err != nil {
			return fmt.Errorf("unable to insert SchemaMigration: %w", err)
		}
	}

	// run afterAdd
	if s.AfterSchemaMigrationsAdded != nil {
		if err := s.AfterSchemaMigrationsAdded(ctx); err != nil {
			return fmt.Errorf("error running AfterSchemaMigrationsAdded: %w", err)
		}
	}

	fmt.Println("Finished adding SchemaMigrations")
	return nil
}

// These packages are needed in SOME models
// This is to prevent errors in those that do not need it
var _ = math.E
var _ = queries.Query{}

// This is to force strconv to be used. Without it, it causes an error because strconv is imported by ALL the drivers
var _ = strconv.IntSize

// schemaMigration is here to prevent erros due to driver "BasedOnType" imports.
type schemaMigration struct {
	Version int64
	Dirty   bool
}
