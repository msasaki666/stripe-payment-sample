// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStripePrices(t *testing.T) {
	t.Parallel()

	query := StripePrices()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStripePricesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StripePrice{}
	if err = randomize.Struct(seed, o, stripePriceDBTypes, true, stripePriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StripePrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StripePrices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStripePricesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StripePrice{}
	if err = randomize.Struct(seed, o, stripePriceDBTypes, true, stripePriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StripePrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := StripePrices().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StripePrices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStripePricesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StripePrice{}
	if err = randomize.Struct(seed, o, stripePriceDBTypes, true, stripePriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StripePrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StripePriceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StripePrices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStripePricesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StripePrice{}
	if err = randomize.Struct(seed, o, stripePriceDBTypes, true, stripePriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StripePrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StripePriceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if StripePrice exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StripePriceExists to return true, but got false.")
	}
}

func testStripePricesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StripePrice{}
	if err = randomize.Struct(seed, o, stripePriceDBTypes, true, stripePriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StripePrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	stripePriceFound, err := FindStripePrice(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if stripePriceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStripePricesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StripePrice{}
	if err = randomize.Struct(seed, o, stripePriceDBTypes, true, stripePriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StripePrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = StripePrices().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStripePricesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StripePrice{}
	if err = randomize.Struct(seed, o, stripePriceDBTypes, true, stripePriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StripePrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := StripePrices().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStripePricesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	stripePriceOne := &StripePrice{}
	stripePriceTwo := &StripePrice{}
	if err = randomize.Struct(seed, stripePriceOne, stripePriceDBTypes, false, stripePriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StripePrice struct: %s", err)
	}
	if err = randomize.Struct(seed, stripePriceTwo, stripePriceDBTypes, false, stripePriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StripePrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = stripePriceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = stripePriceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StripePrices().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStripePricesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	stripePriceOne := &StripePrice{}
	stripePriceTwo := &StripePrice{}
	if err = randomize.Struct(seed, stripePriceOne, stripePriceDBTypes, false, stripePriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StripePrice struct: %s", err)
	}
	if err = randomize.Struct(seed, stripePriceTwo, stripePriceDBTypes, false, stripePriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StripePrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = stripePriceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = stripePriceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StripePrices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func stripePriceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *StripePrice) error {
	*o = StripePrice{}
	return nil
}

func stripePriceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *StripePrice) error {
	*o = StripePrice{}
	return nil
}

func stripePriceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *StripePrice) error {
	*o = StripePrice{}
	return nil
}

func stripePriceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *StripePrice) error {
	*o = StripePrice{}
	return nil
}

func stripePriceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *StripePrice) error {
	*o = StripePrice{}
	return nil
}

func stripePriceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *StripePrice) error {
	*o = StripePrice{}
	return nil
}

func stripePriceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *StripePrice) error {
	*o = StripePrice{}
	return nil
}

func stripePriceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *StripePrice) error {
	*o = StripePrice{}
	return nil
}

func stripePriceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *StripePrice) error {
	*o = StripePrice{}
	return nil
}

func testStripePricesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &StripePrice{}
	o := &StripePrice{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, stripePriceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize StripePrice object: %s", err)
	}

	AddStripePriceHook(boil.BeforeInsertHook, stripePriceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	stripePriceBeforeInsertHooks = []StripePriceHook{}

	AddStripePriceHook(boil.AfterInsertHook, stripePriceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	stripePriceAfterInsertHooks = []StripePriceHook{}

	AddStripePriceHook(boil.AfterSelectHook, stripePriceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	stripePriceAfterSelectHooks = []StripePriceHook{}

	AddStripePriceHook(boil.BeforeUpdateHook, stripePriceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	stripePriceBeforeUpdateHooks = []StripePriceHook{}

	AddStripePriceHook(boil.AfterUpdateHook, stripePriceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	stripePriceAfterUpdateHooks = []StripePriceHook{}

	AddStripePriceHook(boil.BeforeDeleteHook, stripePriceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	stripePriceBeforeDeleteHooks = []StripePriceHook{}

	AddStripePriceHook(boil.AfterDeleteHook, stripePriceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	stripePriceAfterDeleteHooks = []StripePriceHook{}

	AddStripePriceHook(boil.BeforeUpsertHook, stripePriceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	stripePriceBeforeUpsertHooks = []StripePriceHook{}

	AddStripePriceHook(boil.AfterUpsertHook, stripePriceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	stripePriceAfterUpsertHooks = []StripePriceHook{}
}

func testStripePricesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StripePrice{}
	if err = randomize.Struct(seed, o, stripePriceDBTypes, true, stripePriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StripePrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StripePrices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStripePricesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StripePrice{}
	if err = randomize.Struct(seed, o, stripePriceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StripePrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(stripePriceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := StripePrices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStripePriceToOneStripeProductUsingStripeProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local StripePrice
	var foreign StripeProduct

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, stripePriceDBTypes, false, stripePriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StripePrice struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, stripeProductDBTypes, false, stripeProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StripeProduct struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.StripeProductID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.StripeProduct().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddStripeProductHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *StripeProduct) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := StripePriceSlice{&local}
	if err = local.L.LoadStripeProduct(ctx, tx, false, (*[]*StripePrice)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.StripeProduct == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.StripeProduct = nil
	if err = local.L.LoadStripeProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.StripeProduct == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testStripePriceToOneSetOpStripeProductUsingStripeProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StripePrice
	var b, c StripeProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stripePriceDBTypes, false, strmangle.SetComplement(stripePricePrimaryKeyColumns, stripePriceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, stripeProductDBTypes, false, strmangle.SetComplement(stripeProductPrimaryKeyColumns, stripeProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, stripeProductDBTypes, false, strmangle.SetComplement(stripeProductPrimaryKeyColumns, stripeProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*StripeProduct{&b, &c} {
		err = a.SetStripeProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.StripeProduct != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.StripePrices[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.StripeProductID != x.ID {
			t.Error("foreign key was wrong value", a.StripeProductID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.StripeProductID))
		reflect.Indirect(reflect.ValueOf(&a.StripeProductID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.StripeProductID != x.ID {
			t.Error("foreign key was wrong value", a.StripeProductID, x.ID)
		}
	}
}

func testStripePricesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StripePrice{}
	if err = randomize.Struct(seed, o, stripePriceDBTypes, true, stripePriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StripePrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStripePricesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StripePrice{}
	if err = randomize.Struct(seed, o, stripePriceDBTypes, true, stripePriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StripePrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StripePriceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStripePricesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StripePrice{}
	if err = randomize.Struct(seed, o, stripePriceDBTypes, true, stripePriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StripePrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StripePrices().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	stripePriceDBTypes = map[string]string{`ID`: `bigint`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `IDOnStripe`: `text`, `Type`: `text`, `StripeProductID`: `bigint`}
	_                  = bytes.MinRead
)

func testStripePricesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(stripePricePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(stripePriceAllColumns) == len(stripePricePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StripePrice{}
	if err = randomize.Struct(seed, o, stripePriceDBTypes, true, stripePriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StripePrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StripePrices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, stripePriceDBTypes, true, stripePricePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StripePrice struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStripePricesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(stripePriceAllColumns) == len(stripePricePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StripePrice{}
	if err = randomize.Struct(seed, o, stripePriceDBTypes, true, stripePriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StripePrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StripePrices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, stripePriceDBTypes, true, stripePricePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StripePrice struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(stripePriceAllColumns, stripePricePrimaryKeyColumns) {
		fields = stripePriceAllColumns
	} else {
		fields = strmangle.SetComplement(
			stripePriceAllColumns,
			stripePricePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StripePriceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testStripePricesUpsert(t *testing.T) {
	t.Parallel()

	if len(stripePriceAllColumns) == len(stripePricePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := StripePrice{}
	if err = randomize.Struct(seed, &o, stripePriceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StripePrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StripePrice: %s", err)
	}

	count, err := StripePrices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, stripePriceDBTypes, false, stripePricePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StripePrice struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StripePrice: %s", err)
	}

	count, err = StripePrices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
