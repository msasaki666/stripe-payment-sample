// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Customers", testCustomers)
	t.Run("SchemaMigrations", testSchemaMigrations)
	t.Run("StripeOrderItems", testStripeOrderItems)
	t.Run("StripePrices", testStripePrices)
	t.Run("StripeProducts", testStripeProducts)
	t.Run("StripeRecurrings", testStripeRecurrings)
}

func TestDelete(t *testing.T) {
	t.Run("Customers", testCustomersDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
	t.Run("StripeOrderItems", testStripeOrderItemsDelete)
	t.Run("StripePrices", testStripePricesDelete)
	t.Run("StripeProducts", testStripeProductsDelete)
	t.Run("StripeRecurrings", testStripeRecurringsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Customers", testCustomersQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
	t.Run("StripeOrderItems", testStripeOrderItemsQueryDeleteAll)
	t.Run("StripePrices", testStripePricesQueryDeleteAll)
	t.Run("StripeProducts", testStripeProductsQueryDeleteAll)
	t.Run("StripeRecurrings", testStripeRecurringsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Customers", testCustomersSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
	t.Run("StripeOrderItems", testStripeOrderItemsSliceDeleteAll)
	t.Run("StripePrices", testStripePricesSliceDeleteAll)
	t.Run("StripeProducts", testStripeProductsSliceDeleteAll)
	t.Run("StripeRecurrings", testStripeRecurringsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Customers", testCustomersExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
	t.Run("StripeOrderItems", testStripeOrderItemsExists)
	t.Run("StripePrices", testStripePricesExists)
	t.Run("StripeProducts", testStripeProductsExists)
	t.Run("StripeRecurrings", testStripeRecurringsExists)
}

func TestFind(t *testing.T) {
	t.Run("Customers", testCustomersFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
	t.Run("StripeOrderItems", testStripeOrderItemsFind)
	t.Run("StripePrices", testStripePricesFind)
	t.Run("StripeProducts", testStripeProductsFind)
	t.Run("StripeRecurrings", testStripeRecurringsFind)
}

func TestBind(t *testing.T) {
	t.Run("Customers", testCustomersBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
	t.Run("StripeOrderItems", testStripeOrderItemsBind)
	t.Run("StripePrices", testStripePricesBind)
	t.Run("StripeProducts", testStripeProductsBind)
	t.Run("StripeRecurrings", testStripeRecurringsBind)
}

func TestOne(t *testing.T) {
	t.Run("Customers", testCustomersOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
	t.Run("StripeOrderItems", testStripeOrderItemsOne)
	t.Run("StripePrices", testStripePricesOne)
	t.Run("StripeProducts", testStripeProductsOne)
	t.Run("StripeRecurrings", testStripeRecurringsOne)
}

func TestAll(t *testing.T) {
	t.Run("Customers", testCustomersAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
	t.Run("StripeOrderItems", testStripeOrderItemsAll)
	t.Run("StripePrices", testStripePricesAll)
	t.Run("StripeProducts", testStripeProductsAll)
	t.Run("StripeRecurrings", testStripeRecurringsAll)
}

func TestCount(t *testing.T) {
	t.Run("Customers", testCustomersCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
	t.Run("StripeOrderItems", testStripeOrderItemsCount)
	t.Run("StripePrices", testStripePricesCount)
	t.Run("StripeProducts", testStripeProductsCount)
	t.Run("StripeRecurrings", testStripeRecurringsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Customers", testCustomersHooks)
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
	t.Run("StripeOrderItems", testStripeOrderItemsHooks)
	t.Run("StripePrices", testStripePricesHooks)
	t.Run("StripeProducts", testStripeProductsHooks)
	t.Run("StripeRecurrings", testStripeRecurringsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Customers", testCustomersInsert)
	t.Run("Customers", testCustomersInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
	t.Run("StripeOrderItems", testStripeOrderItemsInsert)
	t.Run("StripeOrderItems", testStripeOrderItemsInsertWhitelist)
	t.Run("StripePrices", testStripePricesInsert)
	t.Run("StripePrices", testStripePricesInsertWhitelist)
	t.Run("StripeProducts", testStripeProductsInsert)
	t.Run("StripeProducts", testStripeProductsInsertWhitelist)
	t.Run("StripeRecurrings", testStripeRecurringsInsert)
	t.Run("StripeRecurrings", testStripeRecurringsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("StripePriceToStripeProductUsingStripeProduct", testStripePriceToOneStripeProductUsingStripeProduct)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("StripeProductToStripePrices", testStripeProductToManyStripePrices)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("StripePriceToStripeProductUsingStripePrices", testStripePriceToOneSetOpStripeProductUsingStripeProduct)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("StripeProductToStripePrices", testStripeProductToManyAddOpStripePrices)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Customers", testCustomersReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
	t.Run("StripeOrderItems", testStripeOrderItemsReload)
	t.Run("StripePrices", testStripePricesReload)
	t.Run("StripeProducts", testStripeProductsReload)
	t.Run("StripeRecurrings", testStripeRecurringsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Customers", testCustomersReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
	t.Run("StripeOrderItems", testStripeOrderItemsReloadAll)
	t.Run("StripePrices", testStripePricesReloadAll)
	t.Run("StripeProducts", testStripeProductsReloadAll)
	t.Run("StripeRecurrings", testStripeRecurringsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Customers", testCustomersSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
	t.Run("StripeOrderItems", testStripeOrderItemsSelect)
	t.Run("StripePrices", testStripePricesSelect)
	t.Run("StripeProducts", testStripeProductsSelect)
	t.Run("StripeRecurrings", testStripeRecurringsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Customers", testCustomersUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
	t.Run("StripeOrderItems", testStripeOrderItemsUpdate)
	t.Run("StripePrices", testStripePricesUpdate)
	t.Run("StripeProducts", testStripeProductsUpdate)
	t.Run("StripeRecurrings", testStripeRecurringsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Customers", testCustomersSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
	t.Run("StripeOrderItems", testStripeOrderItemsSliceUpdateAll)
	t.Run("StripePrices", testStripePricesSliceUpdateAll)
	t.Run("StripeProducts", testStripeProductsSliceUpdateAll)
	t.Run("StripeRecurrings", testStripeRecurringsSliceUpdateAll)
}
