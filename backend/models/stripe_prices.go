// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// StripePrice is an object representing the database table.
type StripePrice struct {
	ID              int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt       time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	IDOnStripe      string    `boil:"id_on_stripe" json:"id_on_stripe" toml:"id_on_stripe" yaml:"id_on_stripe"`
	Type            string    `boil:"type" json:"type" toml:"type" yaml:"type"`
	StripeProductID int64     `boil:"stripe_product_id" json:"stripe_product_id" toml:"stripe_product_id" yaml:"stripe_product_id"`

	R *stripePriceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L stripePriceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StripePriceColumns = struct {
	ID              string
	CreatedAt       string
	UpdatedAt       string
	IDOnStripe      string
	Type            string
	StripeProductID string
}{
	ID:              "id",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	IDOnStripe:      "id_on_stripe",
	Type:            "type",
	StripeProductID: "stripe_product_id",
}

var StripePriceTableColumns = struct {
	ID              string
	CreatedAt       string
	UpdatedAt       string
	IDOnStripe      string
	Type            string
	StripeProductID string
}{
	ID:              "stripe_prices.id",
	CreatedAt:       "stripe_prices.created_at",
	UpdatedAt:       "stripe_prices.updated_at",
	IDOnStripe:      "stripe_prices.id_on_stripe",
	Type:            "stripe_prices.type",
	StripeProductID: "stripe_prices.stripe_product_id",
}

// Generated where

var StripePriceWhere = struct {
	ID              whereHelperint64
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
	IDOnStripe      whereHelperstring
	Type            whereHelperstring
	StripeProductID whereHelperint64
}{
	ID:              whereHelperint64{field: "\"stripe_prices\".\"id\""},
	CreatedAt:       whereHelpertime_Time{field: "\"stripe_prices\".\"created_at\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"stripe_prices\".\"updated_at\""},
	IDOnStripe:      whereHelperstring{field: "\"stripe_prices\".\"id_on_stripe\""},
	Type:            whereHelperstring{field: "\"stripe_prices\".\"type\""},
	StripeProductID: whereHelperint64{field: "\"stripe_prices\".\"stripe_product_id\""},
}

// StripePriceRels is where relationship names are stored.
var StripePriceRels = struct {
}{}

// stripePriceR is where relationships are stored.
type stripePriceR struct {
}

// NewStruct creates a new relationship struct
func (*stripePriceR) NewStruct() *stripePriceR {
	return &stripePriceR{}
}

// stripePriceL is where Load methods for each relationship are stored.
type stripePriceL struct{}

var (
	stripePriceAllColumns            = []string{"id", "created_at", "updated_at", "id_on_stripe", "type", "stripe_product_id"}
	stripePriceColumnsWithoutDefault = []string{"created_at", "updated_at", "id_on_stripe", "type", "stripe_product_id"}
	stripePriceColumnsWithDefault    = []string{"id"}
	stripePricePrimaryKeyColumns     = []string{"id"}
	stripePriceGeneratedColumns      = []string{}
)

type (
	// StripePriceSlice is an alias for a slice of pointers to StripePrice.
	// This should almost always be used instead of []StripePrice.
	StripePriceSlice []*StripePrice
	// StripePriceHook is the signature for custom StripePrice hook methods
	StripePriceHook func(context.Context, boil.ContextExecutor, *StripePrice) error

	stripePriceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	stripePriceType                 = reflect.TypeOf(&StripePrice{})
	stripePriceMapping              = queries.MakeStructMapping(stripePriceType)
	stripePricePrimaryKeyMapping, _ = queries.BindMapping(stripePriceType, stripePriceMapping, stripePricePrimaryKeyColumns)
	stripePriceInsertCacheMut       sync.RWMutex
	stripePriceInsertCache          = make(map[string]insertCache)
	stripePriceUpdateCacheMut       sync.RWMutex
	stripePriceUpdateCache          = make(map[string]updateCache)
	stripePriceUpsertCacheMut       sync.RWMutex
	stripePriceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var stripePriceAfterSelectHooks []StripePriceHook

var stripePriceBeforeInsertHooks []StripePriceHook
var stripePriceAfterInsertHooks []StripePriceHook

var stripePriceBeforeUpdateHooks []StripePriceHook
var stripePriceAfterUpdateHooks []StripePriceHook

var stripePriceBeforeDeleteHooks []StripePriceHook
var stripePriceAfterDeleteHooks []StripePriceHook

var stripePriceBeforeUpsertHooks []StripePriceHook
var stripePriceAfterUpsertHooks []StripePriceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StripePrice) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stripePriceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StripePrice) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stripePriceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StripePrice) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stripePriceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StripePrice) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stripePriceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StripePrice) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stripePriceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StripePrice) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stripePriceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StripePrice) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stripePriceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StripePrice) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stripePriceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StripePrice) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stripePriceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStripePriceHook registers your hook function for all future operations.
func AddStripePriceHook(hookPoint boil.HookPoint, stripePriceHook StripePriceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		stripePriceAfterSelectHooks = append(stripePriceAfterSelectHooks, stripePriceHook)
	case boil.BeforeInsertHook:
		stripePriceBeforeInsertHooks = append(stripePriceBeforeInsertHooks, stripePriceHook)
	case boil.AfterInsertHook:
		stripePriceAfterInsertHooks = append(stripePriceAfterInsertHooks, stripePriceHook)
	case boil.BeforeUpdateHook:
		stripePriceBeforeUpdateHooks = append(stripePriceBeforeUpdateHooks, stripePriceHook)
	case boil.AfterUpdateHook:
		stripePriceAfterUpdateHooks = append(stripePriceAfterUpdateHooks, stripePriceHook)
	case boil.BeforeDeleteHook:
		stripePriceBeforeDeleteHooks = append(stripePriceBeforeDeleteHooks, stripePriceHook)
	case boil.AfterDeleteHook:
		stripePriceAfterDeleteHooks = append(stripePriceAfterDeleteHooks, stripePriceHook)
	case boil.BeforeUpsertHook:
		stripePriceBeforeUpsertHooks = append(stripePriceBeforeUpsertHooks, stripePriceHook)
	case boil.AfterUpsertHook:
		stripePriceAfterUpsertHooks = append(stripePriceAfterUpsertHooks, stripePriceHook)
	}
}

// One returns a single stripePrice record from the query.
func (q stripePriceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StripePrice, error) {
	o := &StripePrice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for stripe_prices")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StripePrice records from the query.
func (q stripePriceQuery) All(ctx context.Context, exec boil.ContextExecutor) (StripePriceSlice, error) {
	var o []*StripePrice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to StripePrice slice")
	}

	if len(stripePriceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StripePrice records in the query.
func (q stripePriceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count stripe_prices rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q stripePriceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if stripe_prices exists")
	}

	return count > 0, nil
}

// StripePrices retrieves all the records using an executor.
func StripePrices(mods ...qm.QueryMod) stripePriceQuery {
	mods = append(mods, qm.From("\"stripe_prices\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"stripe_prices\".*"})
	}

	return stripePriceQuery{q}
}

// FindStripePrice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStripePrice(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*StripePrice, error) {
	stripePriceObj := &StripePrice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"stripe_prices\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, stripePriceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from stripe_prices")
	}

	if err = stripePriceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return stripePriceObj, err
	}

	return stripePriceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StripePrice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no stripe_prices provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stripePriceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	stripePriceInsertCacheMut.RLock()
	cache, cached := stripePriceInsertCache[key]
	stripePriceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			stripePriceAllColumns,
			stripePriceColumnsWithDefault,
			stripePriceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(stripePriceType, stripePriceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(stripePriceType, stripePriceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"stripe_prices\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"stripe_prices\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into stripe_prices")
	}

	if !cached {
		stripePriceInsertCacheMut.Lock()
		stripePriceInsertCache[key] = cache
		stripePriceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StripePrice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StripePrice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	stripePriceUpdateCacheMut.RLock()
	cache, cached := stripePriceUpdateCache[key]
	stripePriceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			stripePriceAllColumns,
			stripePricePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update stripe_prices, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"stripe_prices\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, stripePricePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(stripePriceType, stripePriceMapping, append(wl, stripePricePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update stripe_prices row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for stripe_prices")
	}

	if !cached {
		stripePriceUpdateCacheMut.Lock()
		stripePriceUpdateCache[key] = cache
		stripePriceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q stripePriceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for stripe_prices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for stripe_prices")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StripePriceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stripePricePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"stripe_prices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, stripePricePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in stripePrice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all stripePrice")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StripePrice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no stripe_prices provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stripePriceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	stripePriceUpsertCacheMut.RLock()
	cache, cached := stripePriceUpsertCache[key]
	stripePriceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			stripePriceAllColumns,
			stripePriceColumnsWithDefault,
			stripePriceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			stripePriceAllColumns,
			stripePricePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert stripe_prices, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(stripePricePrimaryKeyColumns))
			copy(conflict, stripePricePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"stripe_prices\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(stripePriceType, stripePriceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(stripePriceType, stripePriceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert stripe_prices")
	}

	if !cached {
		stripePriceUpsertCacheMut.Lock()
		stripePriceUpsertCache[key] = cache
		stripePriceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StripePrice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StripePrice) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StripePrice provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), stripePricePrimaryKeyMapping)
	sql := "DELETE FROM \"stripe_prices\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from stripe_prices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for stripe_prices")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q stripePriceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no stripePriceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from stripe_prices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for stripe_prices")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StripePriceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(stripePriceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stripePricePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"stripe_prices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stripePricePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from stripePrice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for stripe_prices")
	}

	if len(stripePriceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StripePrice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStripePrice(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StripePriceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StripePriceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stripePricePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"stripe_prices\".* FROM \"stripe_prices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stripePricePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StripePriceSlice")
	}

	*o = slice

	return nil
}

// StripePriceExists checks if the StripePrice row exists.
func StripePriceExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"stripe_prices\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if stripe_prices exists")
	}

	return exists, nil
}

// Exists checks if the StripePrice row exists.
func (o *StripePrice) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return StripePriceExists(ctx, exec, o.ID)
}
